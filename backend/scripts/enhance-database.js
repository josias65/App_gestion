const db = require('../database');

async function enhanceDatabase() {
  try {
    console.log('üöÄ Am√©lioration de la base de donn√©es pour les appels d\'offre...');
    
    // Initialiser la base de donn√©es d'abord
    await db.init();

    // Ajouter des colonnes √† la table appels_offre
    try {
      await db.run('ALTER TABLE appels_offre ADD COLUMN category TEXT');
      console.log('‚úÖ Colonne category ajout√©e');
    } catch (e) {
      console.log('‚ÑπÔ∏è  Colonne category d√©j√† pr√©sente');
    }

    try {
      await db.run('ALTER TABLE appels_offre ADD COLUMN location TEXT');
      console.log('‚úÖ Colonne location ajout√©e');
    } catch (e) {
      console.log('‚ÑπÔ∏è  Colonne location d√©j√† pr√©sente');
    }

    try {
      await db.run('ALTER TABLE appels_offre ADD COLUMN urgency TEXT DEFAULT "normale"');
      console.log('‚úÖ Colonne urgency ajout√©e');
    } catch (e) {
      console.log('‚ÑπÔ∏è  Colonne urgency d√©j√† pr√©sente');
    }

    try {
      await db.run('ALTER TABLE appels_offre ADD COLUMN created_by INTEGER');
      console.log('‚úÖ Colonne created_by ajout√©e');
    } catch (e) {
      console.log('‚ÑπÔ∏è  Colonne created_by d√©j√† pr√©sente');
    }

    try {
      await db.run('ALTER TABLE appels_offre ADD COLUMN favorite INTEGER DEFAULT 0');
      console.log('‚úÖ Colonne favorite ajout√©e');
    } catch (e) {
      console.log('‚ÑπÔ∏è  Colonne favorite d√©j√† pr√©sente');
    }

    // Table pour les documents des appels d'offre
    await db.run(`
      CREATE TABLE IF NOT EXISTS appel_offre_documents (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        appel_offre_id INTEGER NOT NULL,
        filename TEXT NOT NULL,
        original_name TEXT NOT NULL,
        file_path TEXT NOT NULL,
        file_size INTEGER,
        file_type TEXT,
        uploaded_by INTEGER,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (appel_offre_id) REFERENCES appels_offre (id),
        FOREIGN KEY (uploaded_by) REFERENCES users (id)
      )
    `);
    console.log('‚úÖ Table appel_offre_documents cr√©√©e');

    // Table pour les commentaires des appels d'offre
    await db.run(`
      CREATE TABLE IF NOT EXISTS appel_offre_comments (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        appel_offre_id INTEGER NOT NULL,
        user_id INTEGER NOT NULL,
        content TEXT NOT NULL,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (appel_offre_id) REFERENCES appels_offre (id),
        FOREIGN KEY (user_id) REFERENCES users (id)
      )
    `);
    console.log('‚úÖ Table appel_offre_comments cr√©√©e');

    // Table pour l'historique des appels d'offre
    await db.run(`
      CREATE TABLE IF NOT EXISTS appel_offre_history (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        appel_offre_id INTEGER NOT NULL,
        action TEXT NOT NULL,
        details TEXT,
        user_id INTEGER,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (appel_offre_id) REFERENCES appels_offre (id),
        FOREIGN KEY (user_id) REFERENCES users (id)
      )
    `);
    console.log('‚úÖ Table appel_offre_history cr√©√©e');

    // Table pour les crit√®res d'√©valuation
    await db.run(`
      CREATE TABLE IF NOT EXISTS appel_offre_criteria (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        appel_offre_id INTEGER NOT NULL,
        name TEXT NOT NULL,
        description TEXT,
        weight INTEGER DEFAULT 10,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (appel_offre_id) REFERENCES appels_offre (id)
      )
    `);
    console.log('‚úÖ Table appel_offre_criteria cr√©√©e');

    // Ajouter des colonnes √† la table soumissions
    try {
      await db.run('ALTER TABLE soumissions ADD COLUMN delivery_time TEXT');
      console.log('‚úÖ Colonne delivery_time ajout√©e aux soumissions');
    } catch (e) {
      console.log('‚ÑπÔ∏è  Colonne delivery_time d√©j√† pr√©sente');
    }

    try {
      await db.run('ALTER TABLE soumissions ADD COLUMN warranty TEXT');
      console.log('‚úÖ Colonne warranty ajout√©e aux soumissions');
    } catch (e) {
      console.log('‚ÑπÔ∏è  Colonne warranty d√©j√† pr√©sente');
    }

    try {
      await db.run('ALTER TABLE soumissions ADD COLUMN total_score REAL');
      console.log('‚úÖ Colonne total_score ajout√©e aux soumissions');
    } catch (e) {
      console.log('‚ÑπÔ∏è  Colonne total_score d√©j√† pr√©sente');
    }

    try {
      await db.run('ALTER TABLE soumissions ADD COLUMN evaluation_comments TEXT');
      console.log('‚úÖ Colonne evaluation_comments ajout√©e aux soumissions');
    } catch (e) {
      console.log('‚ÑπÔ∏è  Colonne evaluation_comments d√©j√† pr√©sente');
    }

    try {
      await db.run('ALTER TABLE soumissions ADD COLUMN evaluated_by INTEGER');
      console.log('‚úÖ Colonne evaluated_by ajout√©e aux soumissions');
    } catch (e) {
      console.log('‚ÑπÔ∏è  Colonne evaluated_by d√©j√† pr√©sente');
    }

    try {
      await db.run('ALTER TABLE soumissions ADD COLUMN evaluated_at DATETIME');
      console.log('‚úÖ Colonne evaluated_at ajout√©e aux soumissions');
    } catch (e) {
      console.log('‚ÑπÔ∏è  Colonne evaluated_at d√©j√† pr√©sente');
    }

    // Table pour les scores par crit√®re
    await db.run(`
      CREATE TABLE IF NOT EXISTS soumission_scores (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        soumission_id INTEGER NOT NULL,
        criteria_id INTEGER NOT NULL,
        score REAL NOT NULL,
        comments TEXT,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (soumission_id) REFERENCES soumissions (id),
        FOREIGN KEY (criteria_id) REFERENCES appel_offre_criteria (id)
      )
    `);
    console.log('‚úÖ Table soumission_scores cr√©√©e');

    // Table pour les notifications
    await db.run(`
      CREATE TABLE IF NOT EXISTS notifications (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER NOT NULL,
        title TEXT NOT NULL,
        message TEXT NOT NULL,
        type TEXT DEFAULT 'info',
        is_read INTEGER DEFAULT 0,
        related_id INTEGER,
        related_type TEXT,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (user_id) REFERENCES users (id)
      )
    `);
    console.log('‚úÖ Table notifications cr√©√©e');

    // Table pour les favoris des utilisateurs
    await db.run(`
      CREATE TABLE IF NOT EXISTS user_favorites (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER NOT NULL,
        appel_offre_id INTEGER NOT NULL,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (user_id) REFERENCES users (id),
        FOREIGN KEY (appel_offre_id) REFERENCES appels_offre (id),
        UNIQUE(user_id, appel_offre_id)
      )
    `);
    console.log('‚úÖ Table user_favorites cr√©√©e');

    // Ins√©rer des crit√®res par d√©faut pour les appels d'offre existants
    const existingAppelsOffre = await db.all('SELECT id FROM appels_offre');
    
    for (const appel of existingAppelsOffre) {
      // V√©rifier si des crit√®res existent d√©j√†
      const existingCriteria = await db.get(
        'SELECT COUNT(*) as count FROM appel_offre_criteria WHERE appel_offre_id = ?',
        [appel.id]
      );

      if (existingCriteria.count === 0) {
        // Ajouter des crit√®res par d√©faut
        const defaultCriteria = [
          { name: 'Prix', description: 'Comp√©titivit√© du prix propos√©', weight: 40 },
          { name: 'Qualit√© technique', description: 'Qualit√© et pertinence de la solution technique', weight: 30 },
          { name: 'Exp√©rience', description: 'Exp√©rience du soumissionnaire', weight: 20 },
          { name: 'D√©lai de livraison', description: 'Respect des d√©lais propos√©s', weight: 10 }
        ];

        for (const critere of defaultCriteria) {
          await db.run(
            'INSERT INTO appel_offre_criteria (appel_offre_id, name, description, weight) VALUES (?, ?, ?, ?)',
            [appel.id, critere.name, critere.description, critere.weight]
          );
        }
      }
    }

    console.log('‚úÖ Crit√®res par d√©faut ajout√©s aux appels d\'offre existants');

    // Cr√©er le dossier uploads s'il n'existe pas
    const fs = require('fs');
    const path = require('path');
    const uploadDir = path.join(__dirname, '../uploads');
    
    if (!fs.existsSync(uploadDir)) {
      fs.mkdirSync(uploadDir, { recursive: true });
      fs.mkdirSync(path.join(uploadDir, 'appels-offre'), { recursive: true });
      console.log('‚úÖ Dossier uploads cr√©√©');
    }

    console.log('üéâ Base de donn√©es am√©lior√©e avec succ√®s !');
    console.log('');
    console.log('üìã Nouvelles fonctionnalit√©s disponibles :');
    console.log('   ‚úÖ Gestion des documents');
    console.log('   ‚úÖ Syst√®me de commentaires');
    console.log('   ‚úÖ Historique des modifications');
    console.log('   ‚úÖ Crit√®res d\'√©valuation');
    console.log('   ‚úÖ Notifications');
    console.log('   ‚úÖ Favoris utilisateur');
    console.log('   ‚úÖ Analytics avanc√©s');
    console.log('   ‚úÖ Export des donn√©es');

  } catch (error) {
    console.error('‚ùå Erreur lors de l\'am√©lioration de la base de donn√©es:', error);
    throw error;
  }
}

// Ex√©cuter si appel√© directement
if (require.main === module) {
  enhanceDatabase()
    .then(() => {
      console.log('‚úÖ Am√©lioration termin√©e avec succ√®s');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå Erreur:', error);
      process.exit(1);
    });
}

module.exports = enhanceDatabase;
